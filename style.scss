@use 'sass:math';
@use 'sass:list';

$animation_time: 25s;
$animation_delay: 0s;
$train_height: 300px;
$train_container_size: 500px;
$trains: l l r m r r l m l l lm r l l r;

:root {
  --train-l: black;
  --train-m: black;
  --train-r: black;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  animation: $animation_time linear;
  animation-name: c-l, c-m, c-r;
  animation-delay: $animation_delay;
}

@keyframes c-l {
  @for $i from 1 through list.length($trains) {
    $train: list.nth($trains, $i);
    $percentage: math.div(100, list.length($trains)) * ($i - 1);
    #{$percentage}% {
      @if $train == l {
        --train-l: blue;
      } @else if $train == lm {
        --train-l: blue;
      } @else if $train == lr {
        --train-l: blue;
      } @else {
        --train-l: black;
      }
    }
  }
}

@keyframes c-m {
  @for $i from 1 through list.length($trains) {
    $train: list.nth($trains, $i);
    $percentage: math.div(100, list.length($trains)) * ($i - 1);
    #{$percentage}% {
      @if $train == m {
        --train-m: blue;
      } @else if $train == lm {
        --train-m: blue;
      } @else if $train == mr {
        --train-m: blue;
      } @else {
        --train-m: black;
      }
    }
  }
}

@keyframes c-r {
  @for $i from 1 through list.length($trains) {
    $train: list.nth($trains, $i);
    $percentage: math.div(100, list.length($trains)) * ($i - 1);
    #{$percentage}% {
      @if $train == r {
        --train-r: blue;
      } @else if $train == lr {
        --train-r: blue;
      } @else if $train == rl {
        --train-r: blue;
      } @else {
        --train-r: black;
      }
    }
  }
}

.tester-l {
  position: absolute;
  top: 0;
  left: 0;
  width: 100px;
  height: 100px;
  background-color: var(--train-l);
}

.tester-m {
  position: absolute;
  top: 0px;
  left: 100px;
  width: 100px;
  height: 100px;
  background-color: var(--train-m);
}

.tester-r {
  position: absolute;
  top: 0;
  left: 200px;
  width: 100px;
  height: 100px;
  background-color: var(--train-r);
}

.test-display {
  position: absolute;
  height: 80vh;
  width: 80vw;
  background-color: black;
  opacity: 0.5;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
  display: none; // hide by default
}

@keyframes train-animation {
  0% {
    transform: translateY(
      $train_container_size + 150px + $train_height * -1 * list.length($trains)
    );
  }

  100% {
    transform: translateY($train_container_size + 150px);
  }
}

.train-container {
  background-color: blueviolet;
  position: absolute;
  height: $train_container_size;
  width: $train_container_size;
  top: 50%;
  left: 50%;
  overflow: hidden;
  transform: translate(-50%, -50%);
  // overflow: hidden;

  .train-inner {
    animation: train-animation $animation_time linear forwards;
    animation-delay: $animation_delay;

    .train-row {
      display: grid;
      background-color: pink;
      grid-template-columns: repeat(3, 1fr);
      height: $train_height;

      .train {
        &.left {
          grid-column: 1 / 2;
          background-color: #0f0;
        }

        &.middle {
          grid-column: 2 / 3;
          background-color: #00f;
        }

        &.right {
          grid-column: 3 / 4;
          background-color: #f00;
        }
      }
    }
  }
}

.player-controls {
  border: 1px solid black;
  position: absolute;

  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, calc(math.div($train_container_size, 2) + 20px));

  display: flex;
  gap: 10px;

  .player-move-btn {
    flex: 1;
    background-color: red;
    height: 100px;
    width: 100px;
    position: relative;

    &:has(input:checked) {
      // background-color: green;
    }

    input {
      display: none;
      width: 0px;
      position: absolute;
    }
  }
}

.player-wrapper {
  position: absolute;
  height: 100px;
  width: $train_container_size / 3;
  background-color: white;
  bottom: 10px;
  transition: left 0.05s ease-out;
}

body:has(#move-l:checked) {
  .player-wrapper {
    left: 0%;
  }

  #move-l-label {
    opacity: 0.4;

    &:before {
      content: '<-';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }

  #move-m-label {
    &:before {
      content: '->';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }

  #move-r-label {
    display: none;
  }
}

body:has(#move-m:checked) {
  .player-wrapper {
    left: (math.div(1, 3) * 100%);
  }

  #move-l-label {
    &:before {
      content: '<-';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }

  #move-m-label {
    display: none;
  }

  #move-r-label {
    &:before {
      content: '->';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

body:has(#move-r:checked) {
  .player-wrapper {
    left: (math.div(1, 3) * 100% * 2);
  }

  #move-l-label {
    display: none;
  }

  #move-m-label {
    &:before {
      content: '<-';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }

  #move-r-label {
    opacity: 0.4;
    &:before {
      content: '->';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

// Losing state

@container style(--train-l: blue) {
  body:has(#move-l:checked) {
    .train-inner {
      animation-play-state: paused;
    }

    .test-display {
      display: block;
    }
  }
}

@container style(--train-m: blue) {
  body:has(#move-m:checked) {
    .train-inner {
      animation-play-state: paused;
    }

    .test-display {
      display: block;
    }
  }
}

@container style(--train-r: blue) {
  body:has(#move-r:checked) {
    .train-inner {
      animation-play-state: paused;
    }

    .test-display {
      display: block;
    }
  }
}
